#!/bin/bash

#set -x
#set -e

RED='\033[0;31m'
GREEN='\033[1;32m'
NC='\033[0m' # No Color

. imshrink

testTmpDir=./test.tmp.$(date +%s)
testMntDir=/tmp/mnt.$(date +%s)
testBinFile=$testTmpDir/testfile.bin
testBinFileHash=

baseImgSize=10M
imageMbrPriFile=$testTmpDir/disk-10M-mbr-primary.img
imageMbrExtFile=$testTmpDir/disk-10M-mbr-extended.img
imageGptPriFile=$testTmpDir/disk-10M-gpt-primary.img

p1StartOffset=2048
p2StartOffset=6144

main()
{
  setup
  runAllTests
  cleanUp
}

setup()
{
  mkdir -p "$testTmpDir"
  mkdir -p "$testMntDir"
  head -c 1M /dev/urandom > $testBinFile
  testBinFileHash=$(md5sum $testBinFile | awk '{print $1}')
  
  createMbrPriTestImage $imageMbrPriFile
  formatAndPlaceTestBinFile $imageMbrPriFile
  
  createGptPriTestImage $imageGptPriFile
  formatAndPlaceTestBinFile $imageGptPriFile
  
  createMbrExtTestImage $imageMbrExtFile
}


cleanUp()
{
  rm -r $testTmpDir
}


runAllTests()
{
  testHasExtendedPartition
  testLastPartitionOffset
  testLastPartitionSize
  testShrinkLastPartition
  testFillWithZeros
}

testHasExtendedPartition()
{
  result=$(hasExtendedPartition $imageMbrExtFile)
  assertEqual $result true \
    "When the image contains an extended partition, then the hasExtendedPartition returns 0"
  
  result=$(hasExtendedPartition $imageMbrPriFile)
  assertEqual $result false \
    "When the image does not contain an extended partition, then the hasExtendedPartition returns 1"
  
  result=$(hasExtendedPartition $imageGptPriFile)
  assertEqual $result false \
    "When the image contains a GPT partition table, then the hasExtendedPartition returns 1"
}

testLastPartitionOffset()
{
  offset=$(getLastPartitionOffset $imageMbrPriFile)
  assertEqual $offset 6144 \
    "The ${imageMbrPriFile}.img last partition offset should be 6144"
    
  offset=$(getLastPartitionOffset $imageGptPriFile)
  assertEqual $offset 6144 \
    "The ${imageGptPriFile}.img last partition offset should be 6144"
}

testLastPartitionSize()
{
  size=$(getLastPartitionSize $imageMbrPriFile)
  assertEqual $size 5242880 \
    "The ${imageMbrPriFile}.img last partition size should be 5242880"
    
  size=$(getLastPartitionSize $imageGptPriFile)
  assertEqual $size 5242880 \
    "The ${imageGptPriFile}.img last partition size should be 5242880"
}

testShrinkLastPartition()
{
  image=$imageMbrPriFile
  imageBak=${imageMbrPriFile}.orig
  cp "$image" "$imageBak"
  
  tailSize=0
  sizeBefore=$(getLastPartitionSize $image)
  shrinkLastPartition $image $tailSize
  sizeAfter=$(getLastPartitionSize $image)
  
  assertGreater $sizeBefore $sizeAfter \
    "The ${imageMbrPriFile}.img last partition size should be smaller after shrinking"
    
  cp -f "$imageBak" "$image"
  tailSize=2048
  shrinkLastPartition $image $tailSize
  sizeAfterWithTail=$(getLastPartitionSize $image)
  
  delta=$[$sizeAfterWithTail - $sizeAfter]
  assertEqual $tailSize $delta \
    "The ${imageMbrPriFile}.img last partition size with tail should be accordingly bigger"
    
    
  image=$imageGptPriFile
  tailSize=0
  sizeBefore=$(getLastPartitionSize $image)
  shrinkLastPartition $image $tailSize
  sizeAfter=$(getLastPartitionSize $image)
  
  assertGreater $sizeBefore $sizeAfter \
    "The ${imageGptPriFile}.img last partition size should be smaller after shrinking"
    
  #TODO: assert test file hash hasn't changed
}

#TODO: write sensible assertions
testFillWithZeros()
{
  fillWithZeros $imageMbrPriFile
  fillWithZeros $imageGptPriFile
}

createMbrPriTestImage()
{
  imgFile="$1"
  head -c $baseImgSize /dev/urandom > "$imgFile"
  
  parted --script "$imgFile" mktable msdos
  parted -a optimal --script "$imgFile" mkpart primary ext4 1MiB 3MiB
  parted -a optimal --script "$imgFile" mkpart primary ext4 3MiB 8MiB
}

createMbrExtTestImage()
{
  imgFile="$1"
  head -c $baseImgSize /dev/urandom > "$imgFile"
  
  parted --script "$imgFile" mktable msdos
  parted -a optimal --script "$imgFile" mkpart primary ext4 1MiB 3MiB
  parted -a optimal --script "$imgFile" mkpart extended 3MiB 8MiB
  parted -a optimal --script "$imgFile" mkpart logical ext4 3MiB 8MiB >/dev/null 2>&1
}

createGptPriTestImage()
{
  imgFile="$1"
  head -c $baseImgSize /dev/urandom > "$imgFile"
  
  parted --script "$imgFile" mktable gpt
  parted -a optimal --script "$imgFile" mkpart primary ext4 1MiB 3MiB
  parted -a optimal --script "$imgFile" mkpart primary ext4 3MiB 8MiB
}

formatAndPlaceTestBinFile()
{
  imgFile="$1"
  loDevice=$(losetup -f)
  losetup -o 1MiB -L --partscan --sizelimit 2MiB $loDevice "$imgFile"
  mke2fs -t ext4 $loDevice
  losetup -d $loDevice
  
  fdisk -lu "$imgFile"
  
  losetup -o 3MiB -L --partscan --sizelimit 5MiB $loDevice "$imgFile"
  mke2fs -t ext4 $loDevice
  mount $loDevice $testMntDir
  cp $testBinFile $testMntDir/
  sync
  umount $testMntDir
  losetup -d $loDevice
  
  fdisk -lu "$imgFile"
}


assertEqual()
{
  local lhs=$1
  local rhs=$2
  local msg=$3
  if [[ "$lhs" -eq "$rhs" ]]; then
      echo -e "$GREEN PASSED$NC ($msg)"
  else
      echo -e "$RED FAILED (\"$lhs\" is not \"$rhs\"): $msg$NC"
  fi
}

assertGreater()
{
  local lhs=$1
  local rhs=$2
  local msg=$3
  if [[ "$lhs" -gt "$rhs" ]]; then
      echo -e "$GREEN PASSED$NC ($msg)"
  else
      echo -e "$RED FAILED (\"$lhs\" is not \"$rhs\"): $msg$NC"
  fi
}

assertGreaterEqual()
{
  local lhs=$1
  local rhs=$2
  local msg=$3
  if [[ "$lhs" -ge "$rhs" ]]; then
      echo -e "$GREEN PASSED$NC ($msg)"
  else
      echo -e "$RED FAILED (\"$lhs\" is not \"$rhs\"): $msg$NC"
  fi
}

assertEqualContents()
{
  local lhs=$1
  local rhs=$2
  if cmp --silent $1 $2; then
      echo -e "$GREEN PASSED$NC ($lhs is the same as $rhs)"
  else
      echo -e "$RED FAILED (\"$lhs\" is not the same as \"$rhs\")$NC"
  fi
}


# -------------

main $@
