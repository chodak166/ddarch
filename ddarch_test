#!/bin/bash

# Run selected tests:
# ddarch_test [t1 t2 ..]
#
# Run all tests:
# ddarch_test

set -e 
#set -x && PS4='- Line ${LINENO}: '

DDARCH_PATH=./ddarch

. "$DDARCH_PATH"
. ddarch_test_helpers.shlib
. test.shlib

test_lastPartitionOffset()
{
  setupTestFiles
  
  offset=$(getLastPartitionOffset $TEST_MBR_PRI_IMAGE)
  assertEqual $offset 6144 \
    "The ${TEST_MBR_PRI_IMAGE}.img last partition offset should be 6144"
    
  offset=$(getLastPartitionOffset $TEST_GPT_PRI_IMAGE)
  assertEqual $offset 6144 \
    "The ${TEST_GPT_PRI_IMAGE}.img last partition offset should be 6144"
}

test_lastPartitionSize()
{
  setupTestFiles
  
  size=$(getLastPartitionSize $TEST_MBR_PRI_IMAGE)
  assertEqual $size 5242880 \
    "The ${TEST_MBR_PRI_IMAGE}.img last partition size should be 5242880"
    
  size=$(getLastPartitionSize $TEST_GPT_PRI_IMAGE)
  assertEqual $size 5242880 \
    "The ${TEST_GPT_PRI_IMAGE}.img last partition size should be 5242880"
}

test_shrinkLastPartition()
{
  setupTestFiles

  image=$TEST_MBR_PRI_IMAGE
  imageBak=${TEST_MBR_PRI_IMAGE}.orig
  cp "$image" "$imageBak"
  
  tailSize=0
  sizeBefore=$(getLastPartitionSize $image)
  shrinkLastPartition $image $tailSize
  sizeAfter=$(getLastPartitionSize $image)
  
  assertGreater $sizeBefore $sizeAfter \
    "The ${TEST_MBR_PRI_IMAGE}.img last partition size should be smaller after shrinking"
    
  cp -f "$imageBak" "$image"
  tailSize=$((1024 * 32))
  shrinkLastPartition $image $tailSize
  sizeAfterWithTail=$(getLastPartitionSize $image)
  
  delta=$(($sizeAfterWithTail - $sizeAfter))
  assertEqual $tailSize $delta \
    "The ${TEST_MBR_PRI_IMAGE}.img last partition size with tail should be accordingly bigger"
    
    
  image=$TEST_GPT_PRI_IMAGE
  tailSize=0
  sizeBefore=$(getLastPartitionSize $image)
  shrinkLastPartition $image $tailSize
  sizeAfter=$(getLastPartitionSize $image)
  
  assertGreater $sizeBefore $sizeAfter \
    "The ${TEST_GPT_PRI_IMAGE}.img last partition size should be smaller after shrinking"
    
  #TODO: assert test file hash hasn't changed
}

#TODO: write sensible assertions
test_fillWithZeros()
{
  setupTestFiles

  fillWithZeros $TEST_MBR_PRI_IMAGE
  fillWithZeros $TEST_GPT_PRI_IMAGE
}

test_mbrTruncate()
{
  testTruncate $TEST_MBR_PRI_IMAGE
}

test_gptTruncate()
{
  testTruncate $TEST_GPT_PRI_IMAGE
}

testTruncate()
{
  setupTestFiles

  image=$1
  imgSizeBefore=$(stat --printf="%s" $image)
  truncateImage $image 0
  imgSizeAfter=$(stat --printf="%s" $image)
  
  assertGreater $imgSizeBefore $imgSizeAfter "The size of the image after truncation should be smaller than before"
  
  sectorSize=$(getSectorSize $image) 
  mount -o offset=$(($TEST_P2_OFFSET * $sectorSize)) $image $TEST_MNT_DIR
  mountedTestFileHash=$(md5sum $TEST_MNT_DIR/$TEST_BIN_FILENAME | awk '{print $1}')
  umount $TEST_MNT_DIR
  
  assertEqual $TEST_BIN_FILE_HASH $mountedTestFileHash "Original test file hash and the one from the image should be the same"
}

test_mbrRestore()
{
  testRestore $TEST_MBR_PRI_IMAGE
}

test_gptRestore()
{
  testRestore $TEST_GPT_PRI_IMAGE
}

testRestore()
{
  setupTestFiles

  srcImage=$1
  head -c $TEST_RESTORED_IMAGE_SIZE /dev/urandom > $TEST_RESTORED_IMAGE
  
  loDevice=$(losetup --show -f $TEST_RESTORED_IMAGE) && \
  restoreImage $srcImage $loDevice
  
  losetup -d $loDevice
  
  size=$(getLastPartitionSize $TEST_RESTORED_IMAGE)
  
  assertEqual $size 58769408 "Restored partition size should be 58769408"
}

test_cliArchiveExplicitOutputZip()
{
  setupTestFiles
  local output=$TEST_TMP_DIR/gpt_pri_out.zip
  
  "$DDARCH_PATH" --input $TEST_GPT_PRI_IMAGE \
    --output $output \
    --arch-type zip \
    --quiet
    
  local mimeType=$(getMimeType $output)
  
  assertEqual $mimeType "application/zip;" "Archived output MIME type should be application/zip"
}

test_cliArchiveEmptyWorkDir()
{
  setupTestFiles
  local output=$TEST_TMP_DIR/gpt_pri_out.img
  local workDir=$TEST_TMP_DIR/empty_work_dir
  
  "$DDARCH_PATH" --input $TEST_GPT_PRI_IMAGE \
    --output $output \
    --arch-type none \
    --work-dir $workDir \
    --quiet
    
  local mimeType=$(getMimeType $output)
  test -d $workDir && wdExists=true || wdExists=false
  
  assertEqual $wdExists false "Work directory should be deleted if empty"
}

test_cliArchiveNonEmptyWorkDir()
{
  setupTestFiles
  local output=$TEST_TMP_DIR/gpt_pri_out.img
  local workDir=$TEST_TMP_DIR/non_empty_work_dir
  local foreignFile=$workDir/pre_existing_file.dat
  mkdir -p $workDir
  touch $foreignFile
  
  "$DDARCH_PATH" --input $TEST_GPT_PRI_IMAGE \
    --output $output \
    --arch-type none \
    --work-dir $workDir \
    --yes \
    --quiet
    
  mimeType=$(getMimeType $output)
  test -f $foreignFile && ffExists=true || ffExists=false
  
  assertEqual $ffExists true "Work directory should not be deleted and foreign file should be spared"
}


# -------------

#trap cleanUp EXIT
quiet=true
runTests "$@"

