#!/bin/bash
# Copyright (c) 2021  Lukasz Chodyla
# Distributed under the Boost Software License v1.0.
# See accompanying file LICENSE.txt or copy at
# https://www.boost.org/LICENSE_1_0.txt for the full license.

## $SCRIPT_NAME $SCRIPT_VERSION
##
## Usage: $SCRIPT_FILENAME [options]
## or:    $SCRIPT_FILENAME archive [options]
## or:    $SCRIPT_FILENAME restore [options]
##
## ddarch is a simple helper tool that wraps multiple disk image management utilities to easily create, preserve and restore disk images. 
##
## Commands:
##
## archive (default) - shrink, truncate and compress image file; clone first if the input is a block device
##
## restore           - copy the image to the device and extend the last partition; decompress first if the input is an archive
##
## shell             - run interactive shell with sourced ddarch functions
##
## *OPTIONS*
##
## Archive options:
##   -i, --input [file]             input image file or block device
##   -o, --output [file]            output file, defaults to '<yyyy-mm-dd>-image.<ext>'
##   -d, --dd-args [string]         additional dd arguments
##   -a, --arch-type [string]       archive type: tgz, zip, 7z, none
##   -n, --name [string]            replace "image" suffix of the output file name with the given name
##   --resizepart-tail [bytes]      additional empty space left in the shrunk partition (1MiB by default)
##   --truncate-tail [bytes]        additional empty space left in the truncated image (1MiB by default)
##   --skip-unpart                  do not read input data after the end sector of the last partition
##   --no-resizepart                do not resize the last partition
##   --no-truncate                  do not truncate the image
##   --no-zero                      do not fill empty space with zeros
##   --in-place                     allow input editing (shrink, truncate, remove image) to save space and allow direct compression
##   --mount-dir [dir]              temporary mount location; defaults to /tmp/ddarch.mnt.<timestamp>
##
##
## Restore options:
##   -i, --input [file]             input .img file or an archive (tar.gz, tgz, zip, 7z)
##   -o, --output [device]          target block device
##   -d, --dd-args [string]         additional dd arguments
##   --no-extend                    do not extend the last prtition to fit the target device size
##   --verify                       compare input file and device checksums
## 
##
## Global options:
##   -V, --verbose                  print the commands being executed and additional information
##   -q, --quiet                    do not print any output
##   -y, --yes                      say yes to everything (non-interactive mode)
##   -w, --work-dir [dir]           working directory for temporary files; defaults to /tmp/ddarch.<timestamp>
##   -D, --debug                    Run in debug mode
##   -f, --functions                List functions to be used after sourcing
##   -h, --help                     Display this message
##   -v, --version                  Display script version
##
## *Limitations*
##
## - Archiving and extending MBR images with the last logical partition contained in the extended partition is not supported.
##
## - Archiving images containing physical LVM volumes is not fully supported. You can try archiving with the "--no-zero" parameter and manually managing the volumes after the restore.
##
## *EXAMPLES*
##
## Create an archive from a block device (sdx) with the default output name
## (clone, shrink, fill with zeroes, truncate, compress):
##
##   $SCRIPT_FILENAME -i /dev/sdx # (the same as $SCRIPT_FILENAME archive -i /dev/sdx)
##
## Fast clone (invasive) - prepare the input device and create minimal archive without the unpartitioned space
## (shrink last partition, fill with zeroes, compress partitions on the fly, extend last partition):
##
##   $SCRIPT_FILENAME -i /dev/sdx --in-place --skip-unpart
##
## Create ZIP archive from a block device (sdx) without resizing and truncating the output image:
## 
##   $SCRIPT_FILENAME -i /dev/sdx --no-resizepart --no-truncate --arch-type zip --name raspbian-buster
## 
## Create img file (no compression) from a block device with 10MiB free
## space on the last partition and 5MiB of unpartitioned space:
## 
##   $SCRIPT_FILENAME -i /dev/sdx -a none --resizepart-tail $((10*1024*1024)) --truncate-tail $((10*1024*1024))
## 
## Resize and truncate given image (non-invasive, requires extra space):
##
##   $SCRIPT_FILENAME -i my_image.img -o my_image_min.img --arch-type none
## 
## Resize and truncate given image (invasive, no extra space needed):
##
##   $SCRIPT_FILENAME -i my_image.img -o my_image_min.img --arch-type none --in-place
##
## Copy given image to the device, extend the last partition to the largest 
## possible size and verify the file system:
## 
##   $SCRIPT_FILENAME restore -i my_image.img -o /dev/sdx --verify
## 
## Restore 7z archive to a block device without extending the last partiion
## (the image will be extracted through a pipe based on the file extension):
## 
##   $SCRIPT_FILENAME restore -i my_image.img.7z -o /dev/sdx --no-extend
## 

#===========================================

SCRIPT_NAME=ddarch
SCRIPT_FILENAME=$(basename "$0")
SCRIPT_VERSION=0.1.6
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

#set -e          # exit on command errors
#set -o pipefail # capture fail exit codes in piped commands
#set -x          # execution tracing debug messages

RED='\033[0;31m'
GREEN='\033[1;32m'
COL_PRIMARY='\e[38;5;196m'
COL_SECONDARY='\e[38;5;208m'
NC='\033[00m' # No Color

cachePrefix='ddarch.'
tmpWorkDir=/tmp/${cachePrefix}$(date +%s)
tmpMountDir=/tmp/${cachePrefix}mnt.$(date +%s)
STDOUT=`readlink -f /proc/$$/fd/1`
STDERR=`readlink -f /proc/$$/fd/2`
declare -A MIN_ARGS
MIN_ARGS+=( ["archive"]=1 ["restore"]=2 ["shell"]=0 )

args=($@)
commandName=archive
input=
output=
ddArgs=
outputBaseName=image
shrinkTailSize=$((1024 * 1024)) # 1M
truncateTailSize=$((1024 * 1024)) # 1M
archType=7z
skipUnpart=false
noResize=false
noTruncate=false
noZero=false
noExtend=false
quiet=false
verbose=false
allYes=false
inPlace=false
verify=false
errorNotice=true

loDevice=
unarchivedOutput=

#===========================================


usage() 
{
  exitCode=$1
  test -z $exitCode && exitCode=0
  
  sed -n '/^##/,/^$/s/^## \{0,1\}//p' "$SCRIPT_DIR/$SCRIPT_FILENAME" |
  sed "s/\$SCRIPT_NAME/$SCRIPT_NAME/g" |
  sed "s/\$SCRIPT_FILENAME/$SCRIPT_FILENAME/g" |
  sed "s/\$SCRIPT_VERSION/$SCRIPT_VERSION/g"

  exit $exitCode
} 2>/dev/null

main() {
    set -e
    set -o pipefail

    readCommandArg
    readOptions
    run
    exit 0
}

readCommandArg()
{
  set -- "${args[@]}"
  arg=$1
  firstChar=${arg:0:1}

  if [ "$firstChar" != "-" ] && [ ! -z "$arg" ]; then
    commandName=$arg
    shift
    args=($@)
  fi
}

readOptions()
{
  set -- "${args[@]}"
  
  if [ $# -lt ${MIN_ARGS[$commandName]} ]; then
    usage 1;
  fi
  
  while [ $# -gt 0 ]; do
    case $1 in
      ('-h'|'--help')
        usage 0 2>&1;;
      ('-v'|'--version')
        echo "$SCRIPT_NAME $SCRIPT_VERSION"
        exit 0;;
      ('-i'|'--input')
        shift
        input="$1";;
      ('-o'|'--output')
        shift
        output="$1";;
      ('-d'|'--dd-args')
        shift
        ddArgs="$1";;
      ('-a'|'--arch-type')
        shift
        archType=$1;;
      ('-n'|'--name')
        shift
        outputBaseName="$1";;
      ('--resizepart-tail')
        shift
        shrinkTailSize="$1";;
      ('--truncate-tail')
        shift
        truncateTailSize="$1";;
      ('--no-resizepart')
        noResize=true;;
      ('--skip-unpart')
        skipUnpart=true;;
      ('--no-truncate')
        noTruncate=true;;
      ('--no-zero')
        noZero=true;;
      ('--no-extend')
        noExtend=true;;
      ('--verify')
        verify=true;;
      ('-q'|'--quiet')
        quiet=true;;
      ('--in-place')
        inPlace=true;;
      ('-y'|'--yes')
        allYes=true;;
      ('-w'|'--work-dir')
        shift
        tmpWorkDir="$1";;
      ('--mount-dir')
        shift
        tmpMountDir="$1";;
      ('-D'|'--debug')
        PS4='- Line ${LINENO}: '
        set -x;;
      ('-V'|'--verbose')
        verbose=true;;
      ('-f'|'--functions')
        listFunctions
        exit 0;;
      ('--')
        shift
        break;;
      ('-'*)
        elog -e "\n$0 $1: unknown option. Use --help to learn more.\n"
        exit 3
        break;;
      (*)
        usage 1;;
    esac
  
    shift
  done
}

listFunctions() 
{
  grep '#EXPFUN' "$SCRIPT_DIR/$SCRIPT_FILENAME" \
  | grep -v 'grep'| sed 's/#EXPFUN //g' | sed 's/()//g' \
  | awk -F: '{if(f!=$1)print ""; f=$1; print " " $0;}'
  echo -ne "\n"
} 2>/dev/null

#========== application functions ==========


run() 
{
  trap cleanup EXIT
  if [ $quiet = true ]; then
    exec &>/dev/null
  fi

  assertRoot

  mkdir -p $tmpWorkDir
  mkdir -p $tmpMountDir  
  
  case $commandName in
    ('archive')
      assertInputExists
      assertProperArchType
      setupOutputName
      assertNoTmpfsTemp
      assertNoOutputFile
      archiveImageOrDevice;;
    ('restore')
      assertInputExists
      assertOutputSpecified
      restoreArchiveOrImage;;
    ('shell')
      runDdarchSubshell 
      echo "Exiting ddarch shell";;
    (*)
      elog "Unknown command: $commandName"
      exit 1
  esac
}

cleanup()
{
  retCode=$?
  
  if [ ! -z $loDevice ] && findmnt -rno SOURCE,TARGET $loDevice >/dev/null; then
    losetup -d $loDevice
  fi
  
  if findmnt -rno SOURCE,TARGET $tmpMountDir >/dev/null; then
    umount -f "$tmpMountDir"
  fi
  
  if [ -d "$tmpWorkDir" ] && [ ! $(ls -A "$tmpWorkDir") ]; then rmdir $tmpWorkDir; fi
  if [ -d "$tmpMountDir" ] && [ ! $(ls -A "$tmpMountDir") ]; then rmdir $tmpMountDir; fi
  
  cacheDirs=$(findCacheDirs)
  if [ ! -z "$cacheDirs" ]; then
    wlog "Lingering temporary directories have been found. Consider manual cleanup:"
    printf "$cacheDirs\n"
  fi

  if [ $retCode -eq 0 ]; then
    ilog "Done!"
  elif [ $errorNotice = true ]; then
    wlog "Finished with errors, try --verbose or --debug to investigate what went wrong"
  fi
  
  exit $retCode
}

assertProperArchType()
{
  if [ $archType = 7z ]; then
    if ! command -v 7z &>/dev/null; then
      wlog "7z not found, falling back to tgz"
      archType=tgz
    fi
  elif [ $archType = zip ]; then
    if ! command -v zip &>/dev/null; then
      wlog "zip not found, falling back to tgz"
      archType=tgz
    fi
  fi
}

assertNoOutputFile()
{
  if test -e "$output"; then
    if confirm "The output file ($output) already exists. Do you want to remove it?"; then
      rm "$output"
    else
      exit 0
    fi
  fi
}

assertNoTmpfsTemp()
{
  local fsType=$(getPathFsType "$tmpWorkDir")
  if [ $fsType = tmpfs ]; then
    alternativeWorkDir="$HOME/ddarch.tmp."$(date +%s)
    if confirm "It looks like $tmpWorkDir is a mounted tmpfs ramdisk. Do you want to use $alternativeWorkDir instead?"; then
      if [ ! "$(ls -A $tmpWorkDir)" ]; then rmdir $tmpWorkDir; fi
      tmpWorkDir="$alternativeWorkDir"
      mkdir -p "$tmpWorkDir"
      ilog "Using: $tmpWorkDir"
    else
      wlog "Using tmpfs as a working directory, consider re-run with --work-dir argument"
    fi
  fi
}

assertBlockDevice()
{
  device="$1"
  fileType=$(getMimeType "$device")
  if [[ "$fileType" != "inode/blockdevice" ]]; then
    elog "$device is not a block device, aborting"
    exit 1
  fi
}

assertNotInUse()
{
  device="$1"
  mountPoints=$(getMountPoints "$device")
  if [ ! -z "$mountPoints" ]; then
    elog "It looks like given device ($device) is in use, please unmount: $mountPoints"
    exit 1
  fi
}

setupOutputName() 
{
  if [ -z "$output" ]; then
    output="$PWD/"$(date +%Y-%m-%d)"-${outputBaseName}".img
    unarchivedOutput="$output"
    
    case $archType in
      ('7z')
        output=${output}.7z;;
      ('zip')
        output=${output}.zip;;
      ('tgz'|'tar.gz'|'tar')
        output=${output}.tar.gz;;
      ('none')
        :;;
      (*)
        elog "Unknown archive type: $archType"
        exit 1
    esac
  else
    unarchivedOutput="${output%@(.tar.gz|.zip|.7z)}"
  fi
}

archiveImageOrDevice()
{
  ilog "Archiving $input as $output"
  
  local inputType=$(getInputType)  
  local tmpImage=false

  if [ $inPlace = true ] && ! confirm "Using in-place mode with a block device is invasive and may result in data loss. Continue?"; then
      errorNotice=false
      exit 0
  fi

  if [ $inPlace = true ]; then
    if [[ "$inputType" == "device" ]]; then
      cloneDeviceInvasive
      return 0
    fi
    local imageFile="$input"
  else # use additional image
    local outFilename=
    local imageFile="$tmpWorkDir"/$(basename "$unarchivedOutput")
    clone "$input" "$imageFile" $skipUnpart "$ddArgs"
    tmpImage=true
  fi
  
  archiveImageFile "$imageFile"

  if [ $tmpImage = true ] && [ -f "$imageFile" ] ; then
    rm "$imageFile"
  fi
}

restoreArchiveOrImage()
{
  ilog "Restoring image $input to $output"
  
  assertBlockDevice "$output"
  assertNotInUse "$output"

  restoreImage "$input" "$output" $noExtend

  if [ $verify = true ]; then
    verifyPartitions $output
  fi
}

verifyPartitions() 
{
  offsets=( $(getStartOffsets $output "Linux\|FAT32") )
  vlog "Offsets: ${offsets[*]}"
  for offset in "${offsets[@]}"
  do
    ilog "Verifying partition at sector $offset"
    
    sectorSize=$(getSectorSize $output)
    local offsetBytes=$(($sectorSize * $offset))
    loDevice=$(losetup -f)
    execCmd losetup --offset $offsetBytes $loDevice $output
    if fsck -t ext2,ext3,ext4,vfat -y $loDevice; then
      ilog "${GREEN}Partition verified${NC}"
    else
      elog "Partition starting at sector $offset cannot be positively verified"
    fi
    execCmd losetup -d $loDevice
  done
}

cloneDeviceInvasive()
{
  tryShrink "$input"
  
  if [ $noZero = false ]; then
    fillWithZeros "$input"
  fi
  
  cloneIntoArchive "$input" "$output" "$archType" $skipUnpart "$ddArgs"

  extendLastPartition "$input"
}

archiveImageFile()
{
  local imageFile="$1"
  vlog "Archiving image file: $imageFile"
  
  tryShrink "$imageFile"
  
  if [ $noZero = false ]; then
    fillWithZeros "$imageFile"
  fi
  
  if [ $noTruncate = false ]; then
    truncateImage "$imageFile" $truncateTailSize
  fi
  
  if [ $archType = none ]; then
    if [ $inPlace = false ]; then
      vlog "Moving $outputImage to $output"
      mv "$imageFile" "$output"
    fi
  else
    compressImage "$imageFile" "$output" $archType
    if [ $inPlace = true ]; then
      rm "$imageFile"
    fi
  fi
}

tryShrink()
{
  local device="$1"
  if [ $noResize = false ]; then
    isExt=$(isLastPartitionExt "$device")
    if [ $isExt = false ]; then
      wlog "Shrinking non-ext (Linux) partitions not supported, skipping"
    else
      shrinkLastPartition "$device" $shrinkTailSize
    fi
  fi
}

assertInputExists()
{
  test -e "$input" || (elog "Input does not exist: $input" && exit 1)
}

assertOutputSpecified()
{
  test -z "$output" && (elog "No output specified" && exit 1) ||:
}

assertNoOutputExists()
{
  test -e "$input" || (elog "Input does not exist: $input" && exit 1)
}

assertRoot()
{
  if [[ $EUID -ne 0 ]]; then
    if ! confirm "This script is meant to be run as root user, do you want to continue without root privileges?"; then
      errorNotice=false
      exit 0
    fi
  fi 
}

getInputType()
{
  local fileType=$(getMimeType "$input")
  if [[ "$fileType" == "inode/blockdevice" ]]; then
    echo "device"
  elif [[ "$fileType" == "application/octet-stream" ]]; then
    echo "image"
  else
    echo $fileType
  fi
}

compressImage()
{
  local imageFile="$1"
  local archiveFile="$2"
  local archType=$3
  
  case $archType in
    ('7z')
      7z a "$output" "$imageFile";;
    ('zip')
      zip "$output" "$imageFile";;
    ('tgz'|'tar.gz'|'tar')
      tar -zcf "$output" "$imageFile";;
  esac
  
}

confirm() {

  if [ $allYes = true ]; then
    return 0
  fi

  local text=$1
  local c=''
  while [[ "$c" != "n" ]] && [[ "$c" != "y" ]]; do
    echo -n "${text} [y/n]: "
    read c
  done
  
  if [ "$c" == "y" ]; then
    return 0
  else
    return 1
  fi
}

runDdarchSubshell()
{
  local psString="\[${COL_PRIMARY}\]ddarch:>\[${COL_SECONDARY}\]\w\[${NC}\]"
  [ $UID -eq 0 ] && psString+="# " || psString+="\$ "

  local selfPath="${SCRIPT_DIR}/${SCRIPT_FILENAME}"
  local aliases="
    alias functions='$selfPath --functions';
    alias commands='$selfPath --functions';
    alias help='$selfPath --help';
    alias usage='$selfPath --help';
    "
  local welcomeString="ddarch shell v$SCRIPT_VERSION\n\nType ${GREEN}functions${NC} to see available commands\n"

  bash --init-file <(cat "$HOME/.bashrc";
   echo "source '$selfPath';
    TERM=xterm
    verbose=true
    PS1='$psString'
    echo -e '$welcomeString'
    $aliases")
}

#========== core functions ==========

shrinkLastPartition() #EXPFUN [device/image] [tail size]
{
  # S - sectors, B - bytes, Bk - blocks

  local image="$1"
  local tailSizeB="$2"
  
  vlog "Shrinking the last partition with tail $tailSizeB"
  
  isExt=$(isLastPartitionExt "$image")
  if [ $isExt = false ]; then
    wlog "Last partition does not look like Linux EXT partition, shrinking skipped"
    return 0
  fi
  
  if [ -z "$tailSizeB" ]; then 
    tailSizeB=$shrinkTailSize; 
  fi
  
  local sectorSizeB=$(getSectorSize "$image")
  local offsetS=$(getLastPartitionOffset "$image")
  local offsetB=$(($offsetS * $sectorSizeB))
  
  loDevice=$(losetup -f)
 
  execCmd losetup -o $offsetB $loDevice "$image"
  execCmd 'e2fsck -y -f $loDevice ||:'

  local blockSizeB=$(getBlockSize $loDevice)
  local minSizeBk=$(estimateBlocksAfterShrink $loDevice)
  local minSizeB=$(($minSizeBk * $blockSizeB))
  local currentSizeB=$(getLastPartitionSize "$image")

  if [ $currentSizeB -le $minSizeB ]; then
    wlog "The esimated size after shrinking (${minSizeB}B) is bigger than the current one (${currentSizeB}B), skipping"
    return 0
  fi

  execCmd resize2fs $loDevice $minSizeBk
  execCmd losetup -d $loDevice

  partNumber=$(getLastPartitionNumber "$image")

  local newEndB=$(($offsetB + $minSizeB + $tailSizeB))
  echo Yes | execCmd parted "$image" ---pretend-input-tty unit B resizepart $partNumber ${newEndB}B >/dev/null 2>&1 
}

extendLastPartition() #EXPFUN [device/image]
{
  local device="$1"

  isExt=$(isLastPartitionExt "$device")
  if [ $isExt = false ]; then
    wlog "Last partition does not look like Linux EXT partition, extending skipped"
    return 0
  fi

  isGpt=$(hasGptLayout $device)
  if [ $isGpt = true ]; then
    execCmd sgdisk -e $device
  fi
  
  lastPartitionNum=$(getLastPartitionNumber $device)
  execCmd parted --script $device \"resizepart $lastPartitionNum -1\"
}

fillWithZeros() #EXPFUN [device/image]
{
  local image="$1"
  local sectorSize=$(getSectorSize "$image")
  
  local offsets=( $(getStartOffsets "$image") )
  for offset in "${offsets[@]}"
  do
    ilog "Filling image partition (offset: $offset) with zeroes"
    
    local offsetBytes=$(($sectorSize * $offset))
    loDevice=$(losetup -f)
    execCmd losetup -o $offsetBytes $loDevice "$image"
    test -d $tmpMountDir || mkdir -p $tmpMountDir
    
    execCmd mount $loDevice $tmpMountDir
    
    local space=$(getAvailableSpace $tmpMountDir)
    local zerosFile="$tmpMountDir/zeros.bin"
    execCmd head -c $space /dev/zero > "$zerosFile"
    execCmd sync
    rm "$zerosFile"
    
    execCmd umount "$tmpMountDir"
    execCmd losetup -d $loDevice
    
  done
}

truncateImage()  #EXPFUN [image] [tail size]
{
  local image="$1"
  local tailSize="$2"
  
  vlog "Truncating image with tail size $tailSize"
  
  if [ -z "$tailSize" ]; then 
    tailSize=$truncateTailSize; 
  fi
  
  local endSector=$(getEndSector "$image")
  local sectorSize=$(getSectorSize "$image")
  local isGpt=$(hasGptLayout "$image")
  
  if [ $isGpt = true ]; then
    local offsets=( $(getStartOffsets "$image") )
    local backupSize=$(($sectorSize * ${offsets[0]}))
    local tailSize=$(($tailSize + $backupSize))
  else
    local tailSize=$(($tailSize + $sectorSize))
  fi
  

  local trSize=$(($endSector * $sectorSize + $tailSize))

  vlog "Final truncation size: $trSize bytes"
  execCmd truncate --size $trSize "$image"
  
  if [ $isGpt = true ]; then
    fixGptBackup "$image"
  fi
}

clone() #EXPFUN [device/image] [output] [skip unpartitioned space (true/false)] [dd args]
{
  local input="$1"
  local output="$2"
  local skipUnpart=$3
  local ddArgs="$4"
  local hasGpt=$(hasGptLayout "$input")

  if [ $skipUnpart = true ]; then
    ddArgs=$(prependCountDdArgs "$input" "$ddArgs")
  fi

  execCmd dd if="$input" of="$output" status=progress $ddArgs

  if [ $hasGpt = true ] && [ $skipUnpart = true ]; then
    fixGptBackup "$output"
  fi
}


cloneIntoArchive() #EXPFUN [device/image] [output] [archive type] [skip unpart (true/false)] [extra dd args]
{
  input="$1"
  output="$2"
  archType="$3"
  skipUnpart="$4"
  ddArgs="$5"

  if [ $skipUnpart = true ]; then
    ddArgs=$(prependCountDdArgs "$input" "$ddArgs")
  fi

  case $archType in
    ('7z')
      dd if="$input" status=progress $ddArgs | 7z a -si "$output";;
    ('zip')
      dd if="$input" status=progress $ddArgs | zip > "$output";;
    ('tgz'|'tar.gz'|'tar')
      newOutput=$(echo "$output" | sed 's/.tar.gz/.gz/g')
      wlog "Cannot use tar with data stream, using gzip instead ($output -> $newOutput)"
      dd if="$input" status=progress $ddArgs | gzip -c > "$newOutput";;
  esac
}


restoreImage() #EXPFUN [image] [device] [skip resizepart (true/false)]
{
  local image="$1"
  local device=$2
  local skipResizepart=$3
  
  if [ -z $skipResizepart ]; then 
    skipResizepart=false
  fi
  
  local imageBasename=$(basename "$image")
  local imageExtension="${imageBasename##*.}"
  
  case $imageExtension in
    ('7z'|'7zip')
      execCmd "7z e -so \"$image\" | dd of=$device status=progress $ddArgs";;
    ('zip')
      execCmd "unzip -p \"$image\" | dd of=$device status=progress $ddArgs";;
    ('tgz'|'gz'|'tar')
      execCmd "tar -xOf \"$image\" | dd of=$device status=progress $ddArgs";;
    (*)
      execCmd dd if="$image" of=$device status=progress $ddArgs;;
  esac
  
  if [ $skipResizepart = false ]; then
    extendLastPartition $device
  fi
}

fixGptBackup() #EXPFUN [device/image]
{
  local input="$1"
  execCmd sgdisk --move-second-header "$input" >/dev/null 2>&1
}

#===== misc =====

isLastPartitionExt() #EXPFUN [image]
{
  local image="$1"
  if $(parted --script "$image" print | awk '/./{line=$0} END{print line}' | grep -q 'ext[2-4]'); then
    echo true
  else
    echo false
  fi
}

getLastPartitionOffset() #EXPFUN [device/image]
{
  local image="$1"
  local offset=$(sfdisk -l "$image" -o Start | tail -n 1)
  echo $(trim "$offset")
}

getLastPartitionSize() #EXPFUN [device/image]
{
  local image="$1"
  local size=$(sfdisk --bytes -l -o Size --bytes "$image" | tail -n1)
  echo $(trim "$size")
}

getLastPartitionNumber() #EXPFUN [device/image]
{
  local image="$1"
  local value=$(parted --script "$image" print | grep "." | tail -1 | awk '{print $1}')
  echo $value
}

getBlockCount() #EXPFUN [device]
{
  local device=$1
  local value=$(dumpe2fs -h $device 2> /dev/null | grep 'Block count' | awk '{print $3}')
  echo $(trim "$value")
}

getBlockSize() #EXPFUN [device]
{
  local device=$1
  local value=$(dumpe2fs -h $device 2> /dev/null | grep 'Block size' | awk '{print $3}')
  echo $(trim "$value")
}

getSectorSize() #EXPFUN [device/image]
{
  local image="$1"
  local value=$(sfdisk -l "$image" | grep 'Sector size' | awk '{print $(NF-4)}')
  echo $(trim "$value")
}

estimateBlocksAfterShrink() #EXPFUN [device]
{
  local device=$1  
  local value=$(resize2fs -P $device 2>/dev/null | awk '{print $NF}')
  echo $(trim "$value")
}

getStartOffsets() #EXPFUN [device/image]
{
  local image="$1"
  local typesExpr="$2"
  
  if [ -z "$typesExpr" ]; then
    typesExpr="Linux"
  fi
  
  local value=$(sfdisk -l -o Start,Type "$image" | grep "$typesExpr" | awk '{print $1}')
  echo $value
}

getAvailableSpace() #EXPFUN [path]
{
  local path="$1"
  local value=$(df -P "$path" | awk 'NR==2 {print $4}')
  echo $value
}

getEndSector() #EXPFUN [device/image]
{
  local image="$1"
  local value=$(sfdisk -o End -l "$image" | tail -1)
  echo $(trim "$value")
}

getPathFsType() #EXPFUN [path]
{
  local path="$1"
  local value=$(df -TP $path | tail -1 | awk '{print $2}')
  echo $(trim "$value")
}

getMountPoints() #EXPFUN [device]
{
  local device=$1
  local mounts=( $(lsblk --list --noheadings --output MOUNTPOINT $device | awk '$1' | sort) )
  if [ ${#mounts[@]} -eq 0 ]; then
    return 0
  fi

  mounts=$(printf "'%s' " "${mounts[@]}")
  echo ${mounts}
}

getMimeType() #EXPFUN [file]
{
  local file="$1"
  local value=$(file -N -b -i "$file" | awk '{print $1}')
  echo $(trim "${value%;}")
}

getFirstUsableLba() #EXPFUN [device/image]
{
  local image="$1"
  local value=$(sfdisk --dump "$image" | grep 'first-lba' | awk '{print $2}')
  [ -z "$value" ] && value=0
  echo $(trim "$value")
}

hasGptLayout() #EXPFUN [device/image]
{
  local image="$1"
  if $(sfdisk -l "$image" 2>/dev/null | grep -q 'type: gpt'); then
    echo true
  else
    echo false
  fi
}

findCacheDirs() #EXPFUN
{
  local dirs=$(ls -d -1 "$PWD/$cachePrefix"* 2>/dev/null ||:)
  [ -z "$dirs" ] || dirs+='\n'
  dirs+=$(ls -d -1 "$HOME/$cachePrefix"* 2>/dev/null ||:)
  printf "$dirs"
}

prependCountDdArgs() #EXPFUN [device/image] [dd args]
{
  input="$1"
  ddArgs="$2"

  local lba=$(getFirstUsableLba "$input")
  local endSector=$(getEndSector "$input")

  # add lba (finally lba * sector size) to fit backup gpt table
  # if no gpt table is present, returned lba is 0
  count=$(($endSector + $lba + 1))
  
  local sectorSizeB=$(getSectorSize "$input")
  ddArgs="bs=$sectorSizeB count=$count $ddArgs"
  echo "$ddArgs"
}

trim() {
  local string="$*"
  local string="${string#"${string%%[![:space:]]*}"}"
  local string="${string%"${string##*[![:space:]]}"}"   
  printf '%s' "$string"
}

#========== helper functions ==========

ilog()
{
  [ $quiet = true ] && return 0
  echo -e $(date "+%Y-%m-%d %H:%M:%S")" INFO: $@"
}

wlog()
{
  [ $quiet = true ] && return 0
  echo -e $(date "+%Y-%m-%d %H:%M:%S")" WARNING: $@" 1>&2
}

elog()
{
  [ $quiet = true ] && return 0
  echo -e $(date "+%Y-%m-%d %H:%M:%S")" ${RED}ERROR: $@${NC}" 1>&2
  errorNotice=false
}

vlog()
{
  [ $quiet = true ] && return 0
  if [ $verbose = true ]; then
    echo -e $(date "+%Y-%m-%d %H:%M:%S")" VER: $@"
  fi
}

execCmd()
{
  cmd="$@"
  if [ $quiet = true ]; then
    cmd="$cmd &>/dev/null"
  fi
  
  vlog "Executing ("$(caller)"): $cmd"
  eval "$cmd"
  return $?
}

#===========================================
# run main only if not sourced
(return 0 2>/dev/null) || main "$@"
