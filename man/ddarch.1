.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.48.4.
.TH DDARCH "1" "February 2022" "ddarch 0.1.9" "User Commands"
.SH NAME
ddarch \- archive & restore utility for dd disk images
.SH SYNOPSIS
.B ddarch
[\fI\,options\/\fR]
.br
.B ddarch
\fI\,archive \/\fR[\fI\,options\/\fR]
.br
.B ddarch
\fI\,restore \/\fR[\fI\,options\/\fR]
.SH DESCRIPTION
ddarch 0.1.9
.PP
ddarch is a simple helper tool that wraps multiple disk image management utilities to easily create, preserve and restore disk images.
.PP
Commands:
.PP
archive (default) \- shrink, truncate and compress image file; clone first if the input is a block device
.PP
restore           \- copy the image to the device and extend the last partition; decompress first if the input is an archive
.PP
shell             \- run interactive shell with sourced ddarch functions
.SH OPTIONS
.SS "Archive options:"
.TP
\fB\-i\fR, \fB\-\-input\fR [file]
input image file or block device
.TP
\fB\-o\fR, \fB\-\-output\fR [file]
output file, defaults to '<yyyy\-mm\-dd>\-image.<ext>'
.TP
\fB\-d\fR, \fB\-\-dd\-args\fR [string]
additional dd arguments
.TP
\fB\-a\fR, \fB\-\-arch\-type\fR [string]
archive type: tgz, zip, 7z, none
.TP
\fB\-n\fR, \fB\-\-name\fR [string]
replace "image" suffix of the output file name with the given name
.TP
\fB\-\-resizepart\-tail\fR [bytes]
additional empty space left in the shrunk partition (1MiB by default)
.TP
\fB\-\-truncate\-tail\fR [bytes]
additional empty space left in the truncated image (1MiB by default)
.TP
\fB\-\-skip\-unpart\fR
do not read input data after the end sector of the last partition
.TP
\fB\-\-no\-resizepart\fR
do not resize the last partition
.TP
\fB\-\-no\-truncate\fR
do not truncate the image
.TP
\fB\-\-no\-zero\fR
do not fill empty space with zeros
.TP
\fB\-\-no\-space\-check\fR
do not estimate required disk space and skip the assertions
.TP
\fB\-\-in\-place\fR
allow input editing (shrink, truncate, remove image) to save space and allow direct compression
.TP
\fB\-\-mount\-dir\fR [dir]
temporary mount location; defaults to \fI\,/tmp/ddarch.mnt\/\fP.<timestamp>
.SS "Restore options:"
.TP
\fB\-i\fR, \fB\-\-input\fR [file]
input .img file or an archive (tar.gz, tgz, zip, 7z)
.TP
\fB\-o\fR, \fB\-\-output\fR [device]
target block device
.TP
\fB\-d\fR, \fB\-\-dd\-args\fR [string]
additional dd arguments
.TP
\fB\-\-no\-extend\fR
do not extend the last prtition to fit the target device size
.TP
\fB\-\-verify\fR
compare input file and device checksums
.SS "Global options:"
.TP
\fB\-V\fR, \fB\-\-verbose\fR
print the commands being executed and additional information
.TP
\fB\-q\fR, \fB\-\-quiet\fR
do not print any output
.TP
\fB\-y\fR, \fB\-\-yes\fR
say yes to everything (non\-interactive mode)
.TP
\fB\-w\fR, \fB\-\-work\-dir\fR [dir]
working directory for temporary files; defaults to \fI\,/tmp/ddarch\/\fP.<timestamp>
.TP
\fB\-D\fR, \fB\-\-debug\fR
Run in debug mode
.TP
\fB\-f\fR, \fB\-\-functions\fR
List functions to be used after sourcing
.TP
\fB\-h\fR, \fB\-\-help\fR
Display this message
.TP
\fB\-v\fR, \fB\-\-version\fR
Display script version
.SH LIMITATIONS
\- Archiving and extending MBR images with the last logical partition contained in the extended partition is not supported.
.PP
\- Archiving images containing physical LVM volumes is not fully supported. You can try archiving with the "\-\-no\-zero" parameter and manually managing the volumes after the restore.
.SH EXAMPLES
Create an archive from a block device (sdx) with the default output name
(clone, shrink, fill with zeroes, truncate, compress):
.IP
ddarch \-i /dev/sdx # (the same as ddarch archive \-i /dev/sdx)
.PP
Fast clone (invasive) \- prepare the input device and create minimal archive without the unpartitioned space
(shrink last partition, fill with zeroes, compress partitions on the fly, extend last partition):
.IP
ddarch \-i /dev/sdx \-\-in\-place \-\-skip\-unpart
.PP
Create ZIP archive from a block device (sdx) without resizing and truncating the output image:
.IP
ddarch \-i /dev/sdx \-\-no\-resizepart \-\-no\-truncate \-\-arch\-type zip \-\-name raspbian\-buster
.PP
Create img file (no compression) from a block device with 10MiB free
space on the last partition and 5MiB of unpartitioned space:
.IP
ddarch \-i /dev/sdx \-a none \-\-resizepart\-tail $((10*1024*1024)) \-\-truncate\-tail $((10*1024*1024))
.PP
Resize and truncate given image (non\-invasive, requires extra space):
.IP
ddarch \-i my_image.img \-o my_image_min.img \-\-arch\-type none
.PP
Resize and truncate given image (invasive, no extra space needed):
.IP
ddarch \-i my_image.img \-o my_image_min.img \-\-arch\-type none \-\-in\-place
.PP
Copy given image to the device, extend the last partition to the largest
possible size and verify the file system:
.IP
ddarch restore \-i my_image.img \-o /dev/sdx \-\-verify
.PP
Restore 7z archive to a block device without extending the last partiion
(the image will be extracted through a pipe based on the file extension):
.IP
ddarch restore \-i my_image.img.7z \-o /dev/sdx \-\-no\-extend
